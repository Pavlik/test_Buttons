
testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002528  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002654  08002654  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002654  08002654  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002654  08002654  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002654  08002654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002658  08002658  00012658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800265c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000024  08002680  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002680  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008398  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018ac  00000000  00000000  00028428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  00029cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000733  00000000  00000000  0002a658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000012bf  00000000  00000000  0002ad8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008ceb  00000000  00000000  0002c04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006b69b  00000000  00000000  00034d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002694  00000000  00000000  000a03d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000a2a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	0800261c 	.word	0x0800261c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	0800261c 	.word	0x0800261c

0800014c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0c      	blt.n	8000178 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4907      	ldr	r1, [pc, #28]	; (8000184 <__NVIC_ClearPendingIRQ+0x38>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	3360      	adds	r3, #96	; 0x60
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000178:	bf00      	nop
 800017a:	370c      	adds	r7, #12
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	e000e100 	.word	0xe000e100

08000188 <getDataFromButton>:

//struct buttons button1 = {Button1_Pin, Button1_GPIO_Port, false, EXTI_FTSR_TR1, EXTI_RTSR_TR1};


void getDataFromButton(struct buttons * button)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	buttonState = !HAL_GPIO_ReadPin(button->port, button->pin);
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	685a      	ldr	r2, [r3, #4]
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	881b      	ldrh	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	4610      	mov	r0, r2
 800019c:	f000 ff9a 	bl	80010d4 <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	bf0c      	ite	eq
 80001a6:	2301      	moveq	r3, #1
 80001a8:	2300      	movne	r3, #0
 80001aa:	b2da      	uxtb	r2, r3
 80001ac:	4b2b      	ldr	r3, [pc, #172]	; (800025c <getDataFromButton+0xd4>)
 80001ae:	701a      	strb	r2, [r3, #0]
	if(buttonState && !(button->buttonPressed)) //Если кнопка нажата и флаг нажатия не опущен считать кнопку нажатой, но не обрабатывать
 80001b0:	4b2a      	ldr	r3, [pc, #168]	; (800025c <getDataFromButton+0xd4>)
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d020      	beq.n	80001fc <getDataFromButton+0x74>
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	7a1b      	ldrb	r3, [r3, #8]
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	f083 0301 	eor.w	r3, r3, #1
 80001c4:	b2db      	uxtb	r3, r3
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d018      	beq.n	80001fc <getDataFromButton+0x74>
	{
		button->buttonPressed = true;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2201      	movs	r2, #1
 80001ce:	721a      	strb	r2, [r3, #8]
		EXTI->FTSR &= ~(button->fallingBit);  // Отключаем прерывание по нисходящему фронту
 80001d0:	4b23      	ldr	r3, [pc, #140]	; (8000260 <getDataFromButton+0xd8>)
 80001d2:	68db      	ldr	r3, [r3, #12]
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	7a92      	ldrb	r2, [r2, #10]
 80001d8:	43d2      	mvns	r2, r2
 80001da:	4611      	mov	r1, r2
 80001dc:	4a20      	ldr	r2, [pc, #128]	; (8000260 <getDataFromButton+0xd8>)
 80001de:	400b      	ands	r3, r1
 80001e0:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= button->risingBit;   // Включаем прерывание по восходящему фронту
 80001e2:	4b1f      	ldr	r3, [pc, #124]	; (8000260 <getDataFromButton+0xd8>)
 80001e4:	689b      	ldr	r3, [r3, #8]
 80001e6:	687a      	ldr	r2, [r7, #4]
 80001e8:	7a52      	ldrb	r2, [r2, #9]
 80001ea:	4611      	mov	r1, r2
 80001ec:	4a1c      	ldr	r2, [pc, #112]	; (8000260 <getDataFromButton+0xd8>)
 80001ee:	430b      	orrs	r3, r1
 80001f0:	6093      	str	r3, [r2, #8]
		TIM3 -> ARR = 20000;		   // Подобрать значение чтобы была 2 секунда
 80001f2:	4b1c      	ldr	r3, [pc, #112]	; (8000264 <getDataFromButton+0xdc>)
 80001f4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80001f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80001fa:	e021      	b.n	8000240 <getDataFromButton+0xb8>
	}
	else if(!buttonState && !(button->buttonPressed)) //Если кнопка не нажата и флаг нажатия не опущен
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <getDataFromButton+0xd4>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	b2db      	uxtb	r3, r3
 8000202:	f083 0301 	eor.w	r3, r3, #1
 8000206:	b2db      	uxtb	r3, r3
 8000208:	2b00      	cmp	r3, #0
 800020a:	d00b      	beq.n	8000224 <getDataFromButton+0x9c>
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	7a1b      	ldrb	r3, [r3, #8]
 8000210:	b2db      	uxtb	r3, r3
 8000212:	f083 0301 	eor.w	r3, r3, #1
 8000216:	b2db      	uxtb	r3, r3
 8000218:	2b00      	cmp	r3, #0
 800021a:	d003      	beq.n	8000224 <getDataFromButton+0x9c>
	{
		HAL_TIM_Base_Stop_IT(&htim3);
 800021c:	4812      	ldr	r0, [pc, #72]	; (8000268 <getDataFromButton+0xe0>)
 800021e:	f001 fbef 	bl	8001a00 <HAL_TIM_Base_Stop_IT>
 8000222:	e00d      	b.n	8000240 <getDataFromButton+0xb8>
	}
	else if(buttonState && (button->buttonPressed)) //Если кнопка нажата и флаг нажатия опущен считать кнопку удержанной
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <getDataFromButton+0xd4>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	b2db      	uxtb	r3, r3
 800022a:	2b00      	cmp	r3, #0
 800022c:	d008      	beq.n	8000240 <getDataFromButton+0xb8>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	7a1b      	ldrb	r3, [r3, #8]
 8000232:	b2db      	uxtb	r3, r3
 8000234:	2b00      	cmp	r3, #0
 8000236:	d003      	beq.n	8000240 <getDataFromButton+0xb8>
	{
		handleLongPress(&button);
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f858 	bl	80002f0 <handleLongPress>
	}
	__HAL_GPIO_EXTI_CLEAR_IT(button->pin);  	// очищаем бит EXTI_PR
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	881a      	ldrh	r2, [r3, #0]
 8000244:	4b06      	ldr	r3, [pc, #24]	; (8000260 <getDataFromButton+0xd8>)
 8000246:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);	// очищаем бит NVIC_ICPRx
 8000248:	2028      	movs	r0, #40	; 0x28
 800024a:	f7ff ff7f 	bl	800014c <__NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);     // включаем внешнее прерывание
 800024e:	2028      	movs	r0, #40	; 0x28
 8000250:	f000 fd93 	bl	8000d7a <HAL_NVIC_EnableIRQ>
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000040 	.word	0x20000040
 8000260:	40010400 	.word	0x40010400
 8000264:	40000400 	.word	0x40000400
 8000268:	200000c4 	.word	0x200000c4

0800026c <handleShortPress>:

void handleShortPress(struct buttons ** button)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000278:	4819      	ldr	r0, [pc, #100]	; (80002e0 <handleShortPress+0x74>)
 800027a:	f000 ff5a 	bl	8001132 <HAL_GPIO_TogglePin>

	(*button)->buttonPressed = false;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2200      	movs	r2, #0
 8000284:	721a      	strb	r2, [r3, #8]
	EXTI->FTSR |= (*button)->fallingBit;  // Включаем прерывание по нисходящему фронту
 8000286:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <handleShortPress+0x78>)
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	6812      	ldr	r2, [r2, #0]
 800028e:	7a92      	ldrb	r2, [r2, #10]
 8000290:	4611      	mov	r1, r2
 8000292:	4a14      	ldr	r2, [pc, #80]	; (80002e4 <handleShortPress+0x78>)
 8000294:	430b      	orrs	r3, r1
 8000296:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~((*button)->risingBit);
 8000298:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <handleShortPress+0x78>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	6812      	ldr	r2, [r2, #0]
 80002a0:	7a52      	ldrb	r2, [r2, #9]
 80002a2:	43d2      	mvns	r2, r2
 80002a4:	4611      	mov	r1, r2
 80002a6:	4a0f      	ldr	r2, [pc, #60]	; (80002e4 <handleShortPress+0x78>)
 80002a8:	400b      	ands	r3, r1
 80002aa:	6093      	str	r3, [r2, #8]
	TIM3 -> ARR = 1000;
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <handleShortPress+0x7c>)
 80002ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002b2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3 -> CNT = 0;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <handleShortPress+0x7c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Stop_IT(&htim3);
 80002ba:	480c      	ldr	r0, [pc, #48]	; (80002ec <handleShortPress+0x80>)
 80002bc:	f001 fba0 	bl	8001a00 <HAL_TIM_Base_Stop_IT>
	__HAL_GPIO_EXTI_CLEAR_IT((*button)->pin);  		// очищаем бит EXTI_PR
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	881a      	ldrh	r2, [r3, #0]
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <handleShortPress+0x78>)
 80002c8:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);	// очищаем бит NVIC_ICPRx
 80002ca:	2028      	movs	r0, #40	; 0x28
 80002cc:	f7ff ff3e 	bl	800014c <__NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);     // включаем внешнее прерывание
 80002d0:	2028      	movs	r0, #40	; 0x28
 80002d2:	f000 fd52 	bl	8000d7a <HAL_NVIC_EnableIRQ>
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40011000 	.word	0x40011000
 80002e4:	40010400 	.word	0x40010400
 80002e8:	40000400 	.word	0x40000400
 80002ec:	200000c4 	.word	0x200000c4

080002f0 <handleLongPress>:

void handleLongPress(struct buttons ** button)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fc:	4817      	ldr	r0, [pc, #92]	; (800035c <handleLongPress+0x6c>)
 80002fe:	f000 ff18 	bl	8001132 <HAL_GPIO_TogglePin>

	(*button)->buttonPressed = false;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2200      	movs	r2, #0
 8000308:	721a      	strb	r2, [r3, #8]
	EXTI->FTSR |= (*button)->fallingBit;  // Включаем прерывание по нисходящему фронту
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <handleLongPress+0x70>)
 800030c:	68db      	ldr	r3, [r3, #12]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	6812      	ldr	r2, [r2, #0]
 8000312:	7a92      	ldrb	r2, [r2, #10]
 8000314:	4611      	mov	r1, r2
 8000316:	4a12      	ldr	r2, [pc, #72]	; (8000360 <handleLongPress+0x70>)
 8000318:	430b      	orrs	r3, r1
 800031a:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(*button)->risingBit;
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <handleLongPress+0x70>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	6812      	ldr	r2, [r2, #0]
 8000324:	7a52      	ldrb	r2, [r2, #9]
 8000326:	43d2      	mvns	r2, r2
 8000328:	4611      	mov	r1, r2
 800032a:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <handleLongPress+0x70>)
 800032c:	400b      	ands	r3, r1
 800032e:	6093      	str	r3, [r2, #8]
	TIM3 -> ARR = 1000;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <handleLongPress+0x74>)
 8000332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000336:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_TIM_Base_Stop_IT(&htim3);
 8000338:	480b      	ldr	r0, [pc, #44]	; (8000368 <handleLongPress+0x78>)
 800033a:	f001 fb61 	bl	8001a00 <HAL_TIM_Base_Stop_IT>
	__HAL_GPIO_EXTI_CLEAR_IT((*button)->pin);  		// очищаем бит EXTI_PR
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	881a      	ldrh	r2, [r3, #0]
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <handleLongPress+0x70>)
 8000346:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);	// очищаем бит NVIC_ICPRx
 8000348:	2028      	movs	r0, #40	; 0x28
 800034a:	f7ff feff 	bl	800014c <__NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);     // включаем внешнее прерывание
 800034e:	2028      	movs	r0, #40	; 0x28
 8000350:	f000 fd13 	bl	8000d7a <HAL_NVIC_EnableIRQ>
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40011000 	.word	0x40011000
 8000360:	40010400 	.word	0x40010400
 8000364:	40000400 	.word	0x40000400
 8000368:	200000c4 	.word	0x200000c4

0800036c <callBackButton>:

void callBackButton(struct buttons * button)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	if(!(button->buttonPressed))
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	7a1b      	ldrb	r3, [r3, #8]
 8000378:	b2db      	uxtb	r3, r3
 800037a:	f083 0301 	eor.w	r3, r3, #1
 800037e:	b2db      	uxtb	r3, r3
 8000380:	2b00      	cmp	r3, #0
 8000382:	d006      	beq.n	8000392 <callBackButton+0x26>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000384:	2028      	movs	r0, #40	; 0x28
 8000386:	f000 fd06 	bl	8000d96 <HAL_NVIC_DisableIRQ>
		HAL_TIM_Base_Start_IT(&htim3);
 800038a:	480a      	ldr	r0, [pc, #40]	; (80003b4 <callBackButton+0x48>)
 800038c:	f001 fb15 	bl	80019ba <HAL_TIM_Base_Start_IT>
 8000390:	e00d      	b.n	80003ae <callBackButton+0x42>
	}
	else if(button->buttonPressed)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	7a1b      	ldrb	r3, [r3, #8]
 8000396:	b2db      	uxtb	r3, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d007      	beq.n	80003ac <callBackButton+0x40>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800039c:	2028      	movs	r0, #40	; 0x28
 800039e:	f000 fcfa 	bl	8000d96 <HAL_NVIC_DisableIRQ>
		handleShortPress(&button);
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff61 	bl	800026c <handleShortPress>
 80003aa:	e000      	b.n	80003ae <callBackButton+0x42>
	}
	else return;
 80003ac:	bf00      	nop
}
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	200000c4 	.word	0x200000c4

080003b8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == button1.pin)
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <HAL_GPIO_EXTI_Callback+0x38>)
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	88fa      	ldrh	r2, [r7, #6]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d103      	bne.n	80003d4 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		callBackButton(&button1);
 80003cc:	4808      	ldr	r0, [pc, #32]	; (80003f0 <HAL_GPIO_EXTI_Callback+0x38>)
 80003ce:	f7ff ffcd 	bl	800036c <callBackButton>
	else
	{
		__NOP();
	}

}
 80003d2:	e009      	b.n	80003e8 <HAL_GPIO_EXTI_Callback+0x30>
	else if(GPIO_Pin == button2.pin)
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80003d6:	881b      	ldrh	r3, [r3, #0]
 80003d8:	88fa      	ldrh	r2, [r7, #6]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d103      	bne.n	80003e6 <HAL_GPIO_EXTI_Callback+0x2e>
		callBackButton(&button2);
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80003e0:	f7ff ffc4 	bl	800036c <callBackButton>
}
 80003e4:	e000      	b.n	80003e8 <HAL_GPIO_EXTI_Callback+0x30>
		__NOP();
 80003e6:	bf00      	nop
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000000 	.word	0x20000000
 80003f4:	2000000c 	.word	0x2000000c

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fc:	f000 fb44 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000400:	f000 f809 	bl	8000416 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000404:	f000 f946 	bl	8000694 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000408:	f000 f84a 	bl	80004a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800040c:	f000 f89a 	bl	8000544 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000410:	f000 f8f2 	bl	80005f8 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000414:	e7fe      	b.n	8000414 <main+0x1c>

08000416 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b090      	sub	sp, #64	; 0x40
 800041a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041c:	f107 0318 	add.w	r3, r7, #24
 8000420:	2228      	movs	r2, #40	; 0x28
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f002 f8cd 	bl	80025c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000438:	2301      	movs	r3, #1
 800043a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800043c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000440:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000446:	2301      	movs	r3, #1
 8000448:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800044a:	2302      	movs	r3, #2
 800044c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800044e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000452:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000454:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000458:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	4618      	mov	r0, r3
 8000460:	f000 fe98 	bl	8001194 <HAL_RCC_OscConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800046a:	f000 f977 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046e:	230f      	movs	r3, #15
 8000470:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000472:	2302      	movs	r3, #2
 8000474:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000476:	2380      	movs	r3, #128	; 0x80
 8000478:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800047a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800047e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2102      	movs	r1, #2
 8000488:	4618      	mov	r0, r3
 800048a:	f001 f905 	bl	8001698 <HAL_RCC_ClockConfig>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000494:	f000 f962 	bl	800075c <Error_Handler>
  }
}
 8000498:	bf00      	nop
 800049a:	3740      	adds	r7, #64	; 0x40
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b4:	463b      	mov	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004bc:	4b1f      	ldr	r3, [pc, #124]	; (800053c <MX_TIM1_Init+0x9c>)
 80004be:	4a20      	ldr	r2, [pc, #128]	; (8000540 <MX_TIM1_Init+0xa0>)
 80004c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3600;
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <MX_TIM1_Init+0x9c>)
 80004c4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80004c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ca:	4b1c      	ldr	r3, [pc, #112]	; (800053c <MX_TIM1_Init+0x9c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80004d0:	4b1a      	ldr	r3, [pc, #104]	; (800053c <MX_TIM1_Init+0x9c>)
 80004d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80004d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <MX_TIM1_Init+0x9c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_TIM1_Init+0x9c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <MX_TIM1_Init+0x9c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004ea:	4814      	ldr	r0, [pc, #80]	; (800053c <MX_TIM1_Init+0x9c>)
 80004ec:	f001 fa3a 	bl	8001964 <HAL_TIM_Base_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80004f6:	f000 f931 	bl	800075c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000500:	f107 0308 	add.w	r3, r7, #8
 8000504:	4619      	mov	r1, r3
 8000506:	480d      	ldr	r0, [pc, #52]	; (800053c <MX_TIM1_Init+0x9c>)
 8000508:	f001 fc9e 	bl	8001e48 <HAL_TIM_ConfigClockSource>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000512:	f000 f923 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800051e:	463b      	mov	r3, r7
 8000520:	4619      	mov	r1, r3
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <MX_TIM1_Init+0x9c>)
 8000524:	f001 fff8 	bl	8002518 <HAL_TIMEx_MasterConfigSynchronization>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800052e:	f000 f915 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000044 	.word	0x20000044
 8000540:	40012c00 	.word	0x40012c00

08000544 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	; 0x28
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]
 8000562:	615a      	str	r2, [r3, #20]
 8000564:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <MX_TIM2_Init+0xb0>)
 8000568:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800056c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <MX_TIM2_Init+0xb0>)
 8000570:	2200      	movs	r2, #0
 8000572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <MX_TIM2_Init+0xb0>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9025;
 800057a:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <MX_TIM2_Init+0xb0>)
 800057c:	f242 3241 	movw	r2, #9025	; 0x2341
 8000580:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <MX_TIM2_Init+0xb0>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_TIM2_Init+0xb0>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800058e:	4819      	ldr	r0, [pc, #100]	; (80005f4 <MX_TIM2_Init+0xb0>)
 8000590:	f001 fa60 	bl	8001a54 <HAL_TIM_PWM_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800059a:	f000 f8df 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	4619      	mov	r1, r3
 80005ac:	4811      	ldr	r0, [pc, #68]	; (80005f4 <MX_TIM2_Init+0xb0>)
 80005ae:	f001 ffb3 	bl	8002518 <HAL_TIMEx_MasterConfigSynchronization>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80005b8:	f000 f8d0 	bl	800075c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005bc:	2360      	movs	r3, #96	; 0x60
 80005be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2256;
 80005c0:	f44f 630d 	mov.w	r3, #2256	; 0x8d0
 80005c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <MX_TIM2_Init+0xb0>)
 80005d6:	f001 fb71 	bl	8001cbc <HAL_TIM_PWM_ConfigChannel>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80005e0:	f000 f8bc 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <MX_TIM2_Init+0xb0>)
 80005e6:	f000 f95f 	bl	80008a8 <HAL_TIM_MspPostInit>

}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	; 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000084 	.word	0x20000084

080005f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_TIM3_Init+0x94>)
 8000616:	4a1e      	ldr	r2, [pc, #120]	; (8000690 <MX_TIM3_Init+0x98>)
 8000618:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600;
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MX_TIM3_Init+0x94>)
 800061c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000620:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_TIM3_Init+0x94>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_TIM3_Init+0x94>)
 800062a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800062e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_TIM3_Init+0x94>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_TIM3_Init+0x94>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800063c:	4813      	ldr	r0, [pc, #76]	; (800068c <MX_TIM3_Init+0x94>)
 800063e:	f001 f991 	bl	8001964 <HAL_TIM_Base_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000648:	f000 f888 	bl	800075c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	4619      	mov	r1, r3
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_TIM3_Init+0x94>)
 800065a:	f001 fbf5 	bl	8001e48 <HAL_TIM_ConfigClockSource>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000664:	f000 f87a 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_TIM3_Init+0x94>)
 8000676:	f001 ff4f 	bl	8002518 <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000680:	f000 f86c 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000c4 	.word	0x200000c4
 8000690:	40000400 	.word	0x40000400

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <MX_GPIO_Init+0xb8>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a27      	ldr	r2, [pc, #156]	; (800074c <MX_GPIO_Init+0xb8>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <MX_GPIO_Init+0xb8>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0310 	and.w	r3, r3, #16
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_GPIO_Init+0xb8>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <MX_GPIO_Init+0xb8>)
 80006c6:	f043 0320 	orr.w	r3, r3, #32
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_GPIO_Init+0xb8>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0320 	and.w	r3, r3, #32
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_GPIO_Init+0xb8>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <MX_GPIO_Init+0xb8>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_GPIO_Init+0xb8>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f6:	4816      	ldr	r0, [pc, #88]	; (8000750 <MX_GPIO_Init+0xbc>)
 80006f8:	f000 fd03 	bl	8001102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2302      	movs	r3, #2
 800070c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	4619      	mov	r1, r3
 8000714:	480e      	ldr	r0, [pc, #56]	; (8000750 <MX_GPIO_Init+0xbc>)
 8000716:	f000 fb59 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 800071a:	2302      	movs	r3, #2
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_GPIO_Init+0xc0>)
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000722:	2301      	movs	r3, #1
 8000724:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	4619      	mov	r1, r3
 800072c:	480a      	ldr	r0, [pc, #40]	; (8000758 <MX_GPIO_Init+0xc4>)
 800072e:	f000 fb4d 	bl	8000dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2007      	movs	r0, #7
 8000738:	f000 fb03 	bl	8000d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800073c:	2007      	movs	r0, #7
 800073e:	f000 fb1c 	bl	8000d7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000742:	bf00      	nop
 8000744:	3720      	adds	r7, #32
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	40011000 	.word	0x40011000
 8000754:	10210000 	.word	0x10210000
 8000758:	40010800 	.word	0x40010800

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <HAL_MspInit+0x6c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <HAL_MspInit+0x6c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <HAL_MspInit+0x6c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <HAL_MspInit+0x6c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <HAL_MspInit+0x6c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <HAL_MspInit+0x6c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2005      	movs	r0, #5
 80007a4:	f000 facd 	bl	8000d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80007a8:	2005      	movs	r0, #5
 80007aa:	f000 fae6 	bl	8000d7a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_MspInit+0x70>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <HAL_MspInit+0x70>)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010000 	.word	0x40010000

080007dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <HAL_TIM_Base_MspInit+0x78>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d114      	bne.n	8000818 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <HAL_TIM_Base_MspInit+0x7c>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a19      	ldr	r2, [pc, #100]	; (8000858 <HAL_TIM_Base_MspInit+0x7c>)
 80007f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <HAL_TIM_Base_MspInit+0x7c>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2019      	movs	r0, #25
 800080c:	f000 fa99 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000810:	2019      	movs	r0, #25
 8000812:	f000 fab2 	bl	8000d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000816:	e018      	b.n	800084a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a0f      	ldr	r2, [pc, #60]	; (800085c <HAL_TIM_Base_MspInit+0x80>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d113      	bne.n	800084a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_TIM_Base_MspInit+0x7c>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <HAL_TIM_Base_MspInit+0x7c>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_TIM_Base_MspInit+0x7c>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	201d      	movs	r0, #29
 8000840:	f000 fa7f 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000844:	201d      	movs	r0, #29
 8000846:	f000 fa98 	bl	8000d7a <HAL_NVIC_EnableIRQ>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40012c00 	.word	0x40012c00
 8000858:	40021000 	.word	0x40021000
 800085c:	40000400 	.word	0x40000400

08000860 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000870:	d113      	bne.n	800089a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_TIM_PWM_MspInit+0x44>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <HAL_TIM_PWM_MspInit+0x44>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_TIM_PWM_MspInit+0x44>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	201c      	movs	r0, #28
 8000890:	f000 fa57 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000894:	201c      	movs	r0, #28
 8000896:	f000 fa70 	bl	8000d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008c6:	d117      	bne.n	80008f8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <HAL_TIM_MspPostInit+0x58>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <HAL_TIM_MspPostInit+0x58>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_TIM_MspPostInit+0x58>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e0:	2301      	movs	r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <HAL_TIM_MspPostInit+0x5c>)
 80008f4:	f000 fa6a 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000
 8000904:	40010800 	.word	0x40010800

08000908 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM1)
	{
		//alarm(firstTrashold);

	}
	if(htim -> Instance == TIM3)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d102      	bne.n	8000920 <HAL_TIM_PeriodElapsedCallback+0x18>
		{
			getDataFromButton(&button1);
 800091a:	4804      	ldr	r0, [pc, #16]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800091c:	f7ff fc34 	bl	8000188 <getDataFromButton>
		}

}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40000400 	.word	0x40000400
 800092c:	20000000 	.word	0x20000000

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr

0800095a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr

08000972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000976:	f000 f8cd 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}

0800097e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr

0800098a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 800098e:	2002      	movs	r0, #2
 8000990:	f000 fbe8 	bl	8001164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM1_UP_IRQHandler+0x10>)
 800099e:	f001 f884 	bl	8001aaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000044 	.word	0x20000044

080009ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <TIM2_IRQHandler+0x10>)
 80009b2:	f001 f87a 	bl	8001aaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000084 	.word	0x20000084

080009c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <TIM3_IRQHandler+0x10>)
 80009c6:	f001 f870 	bl	8001aaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000c4 	.word	0x200000c4

080009d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <SystemInit+0x5c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <SystemInit+0x5c>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <SystemInit+0x5c>)
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	4911      	ldr	r1, [pc, #68]	; (8000a30 <SystemInit+0x5c>)
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <SystemInit+0x60>)
 80009ec:	4013      	ands	r3, r2
 80009ee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <SystemInit+0x5c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <SystemInit+0x5c>)
 80009f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <SystemInit+0x5c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <SystemInit+0x5c>)
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <SystemInit+0x5c>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <SystemInit+0x5c>)
 8000a12:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a16:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <SystemInit+0x5c>)
 8000a1a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a1e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <SystemInit+0x64>)
 8000a22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a26:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	40021000 	.word	0x40021000
 8000a34:	f8ff0000 	.word	0xf8ff0000
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a3e:	e003      	b.n	8000a48 <LoopCopyDataInit>

08000a40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a46:	3104      	adds	r1, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a48:	480a      	ldr	r0, [pc, #40]	; (8000a74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a50:	d3f6      	bcc.n	8000a40 <CopyDataInit>
  ldr r2, =_sbss
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a54:	e002      	b.n	8000a5c <LoopFillZerobss>

08000a56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a58:	f842 3b04 	str.w	r3, [r2], #4

08000a5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a60:	d3f9      	bcc.n	8000a56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a62:	f7ff ffb7 	bl	80009d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a66:	f001 fdb5 	bl	80025d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6a:	f7ff fcc5 	bl	80003f8 <main>
  bx lr
 8000a6e:	4770      	bx	lr
  ldr r3, =_sidata
 8000a70:	0800265c 	.word	0x0800265c
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a78:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8000a7c:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8000a80:	20000108 	.word	0x20000108

08000a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_2_IRQHandler>
	...

08000a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_Init+0x28>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x28>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f947 	bl	8000d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	200f      	movs	r0, #15
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff fe60 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f96d 	bl	8000db2 <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f000 f927 	bl	8000d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000018 	.word	0x20000018
 8000b0c:	20000020 	.word	0x20000020
 8000b10:	2000001c 	.word	0x2000001c

08000b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x1c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x20>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a03      	ldr	r2, [pc, #12]	; (8000b34 <HAL_IncTick+0x20>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	20000020 	.word	0x20000020
 8000b34:	20000104 	.word	0x20000104

08000b38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <HAL_GetTick+0x10>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	20000104 	.word	0x20000104

08000b4c <__NVIC_SetPriorityGrouping>:
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4906      	ldr	r1, [pc, #24]	; (8000be4 <__NVIC_EnableIRQ+0x34>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <__NVIC_DisableIRQ>:
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db12      	blt.n	8000c20 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 021f 	and.w	r2, r3, #31
 8000c00:	490a      	ldr	r1, [pc, #40]	; (8000c2c <__NVIC_DisableIRQ+0x44>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	095b      	lsrs	r3, r3, #5
 8000c08:	2001      	movs	r0, #1
 8000c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0e:	3320      	adds	r3, #32
 8000c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c14:	f3bf 8f4f 	dsb	sy
}
 8000c18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c1a:	f3bf 8f6f 	isb	sy
}
 8000c1e:	bf00      	nop
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf8:	d301      	bcc.n	8000cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00f      	b.n	8000d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <SysTick_Config+0x40>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d06:	210f      	movs	r1, #15
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f7ff ff90 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <SysTick_Config+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <SysTick_Config+0x40>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff09 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d54:	f7ff ff1e 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff ff90 	bl	8000c84 <NVIC_EncodePriority>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff5f 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff11 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff1f 	bl	8000be8 <__NVIC_DisableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ff94 	bl	8000ce8 <SysTick_Config>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b08b      	sub	sp, #44	; 0x2c
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dde:	e169      	b.n	80010b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000de0:	2201      	movs	r2, #1
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	f040 8158 	bne.w	80010ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	4a9a      	ldr	r2, [pc, #616]	; (800106c <HAL_GPIO_Init+0x2a0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d05e      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e08:	4a98      	ldr	r2, [pc, #608]	; (800106c <HAL_GPIO_Init+0x2a0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d875      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e0e:	4a98      	ldr	r2, [pc, #608]	; (8001070 <HAL_GPIO_Init+0x2a4>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d058      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e14:	4a96      	ldr	r2, [pc, #600]	; (8001070 <HAL_GPIO_Init+0x2a4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d86f      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e1a:	4a96      	ldr	r2, [pc, #600]	; (8001074 <HAL_GPIO_Init+0x2a8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d052      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e20:	4a94      	ldr	r2, [pc, #592]	; (8001074 <HAL_GPIO_Init+0x2a8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d869      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e26:	4a94      	ldr	r2, [pc, #592]	; (8001078 <HAL_GPIO_Init+0x2ac>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d04c      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e2c:	4a92      	ldr	r2, [pc, #584]	; (8001078 <HAL_GPIO_Init+0x2ac>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d863      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e32:	4a92      	ldr	r2, [pc, #584]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d046      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
 8000e38:	4a90      	ldr	r2, [pc, #576]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d85d      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e3e:	2b12      	cmp	r3, #18
 8000e40:	d82a      	bhi.n	8000e98 <HAL_GPIO_Init+0xcc>
 8000e42:	2b12      	cmp	r3, #18
 8000e44:	d859      	bhi.n	8000efa <HAL_GPIO_Init+0x12e>
 8000e46:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <HAL_GPIO_Init+0x80>)
 8000e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4c:	08000ec7 	.word	0x08000ec7
 8000e50:	08000ea1 	.word	0x08000ea1
 8000e54:	08000eb3 	.word	0x08000eb3
 8000e58:	08000ef5 	.word	0x08000ef5
 8000e5c:	08000efb 	.word	0x08000efb
 8000e60:	08000efb 	.word	0x08000efb
 8000e64:	08000efb 	.word	0x08000efb
 8000e68:	08000efb 	.word	0x08000efb
 8000e6c:	08000efb 	.word	0x08000efb
 8000e70:	08000efb 	.word	0x08000efb
 8000e74:	08000efb 	.word	0x08000efb
 8000e78:	08000efb 	.word	0x08000efb
 8000e7c:	08000efb 	.word	0x08000efb
 8000e80:	08000efb 	.word	0x08000efb
 8000e84:	08000efb 	.word	0x08000efb
 8000e88:	08000efb 	.word	0x08000efb
 8000e8c:	08000efb 	.word	0x08000efb
 8000e90:	08000ea9 	.word	0x08000ea9
 8000e94:	08000ebd 	.word	0x08000ebd
 8000e98:	4a79      	ldr	r2, [pc, #484]	; (8001080 <HAL_GPIO_Init+0x2b4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d013      	beq.n	8000ec6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e9e:	e02c      	b.n	8000efa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	623b      	str	r3, [r7, #32]
          break;
 8000ea6:	e029      	b.n	8000efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	3304      	adds	r3, #4
 8000eae:	623b      	str	r3, [r7, #32]
          break;
 8000eb0:	e024      	b.n	8000efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	3308      	adds	r3, #8
 8000eb8:	623b      	str	r3, [r7, #32]
          break;
 8000eba:	e01f      	b.n	8000efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	330c      	adds	r3, #12
 8000ec2:	623b      	str	r3, [r7, #32]
          break;
 8000ec4:	e01a      	b.n	8000efc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	623b      	str	r3, [r7, #32]
          break;
 8000ed2:	e013      	b.n	8000efc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d105      	bne.n	8000ee8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000edc:	2308      	movs	r3, #8
 8000ede:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	611a      	str	r2, [r3, #16]
          break;
 8000ee6:	e009      	b.n	8000efc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee8:	2308      	movs	r3, #8
 8000eea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	615a      	str	r2, [r3, #20]
          break;
 8000ef2:	e003      	b.n	8000efc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	e000      	b.n	8000efc <HAL_GPIO_Init+0x130>
          break;
 8000efa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	2bff      	cmp	r3, #255	; 0xff
 8000f00:	d801      	bhi.n	8000f06 <HAL_GPIO_Init+0x13a>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	e001      	b.n	8000f0a <HAL_GPIO_Init+0x13e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	2bff      	cmp	r3, #255	; 0xff
 8000f10:	d802      	bhi.n	8000f18 <HAL_GPIO_Init+0x14c>
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	e002      	b.n	8000f1e <HAL_GPIO_Init+0x152>
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	3b08      	subs	r3, #8
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	210f      	movs	r1, #15
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	401a      	ands	r2, r3
 8000f30:	6a39      	ldr	r1, [r7, #32]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 80b1 	beq.w	80010ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f4c:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <HAL_GPIO_Init+0x2b8>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a4c      	ldr	r2, [pc, #304]	; (8001084 <HAL_GPIO_Init+0x2b8>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <HAL_GPIO_Init+0x2b8>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f64:	4a48      	ldr	r2, [pc, #288]	; (8001088 <HAL_GPIO_Init+0x2bc>)
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a40      	ldr	r2, [pc, #256]	; (800108c <HAL_GPIO_Init+0x2c0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d013      	beq.n	8000fb8 <HAL_GPIO_Init+0x1ec>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a3f      	ldr	r2, [pc, #252]	; (8001090 <HAL_GPIO_Init+0x2c4>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00d      	beq.n	8000fb4 <HAL_GPIO_Init+0x1e8>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a3e      	ldr	r2, [pc, #248]	; (8001094 <HAL_GPIO_Init+0x2c8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_GPIO_Init+0x1e4>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a3d      	ldr	r2, [pc, #244]	; (8001098 <HAL_GPIO_Init+0x2cc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d101      	bne.n	8000fac <HAL_GPIO_Init+0x1e0>
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e006      	b.n	8000fba <HAL_GPIO_Init+0x1ee>
 8000fac:	2304      	movs	r3, #4
 8000fae:	e004      	b.n	8000fba <HAL_GPIO_Init+0x1ee>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	e002      	b.n	8000fba <HAL_GPIO_Init+0x1ee>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <HAL_GPIO_Init+0x1ee>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fbc:	f002 0203 	and.w	r2, r2, #3
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	4093      	lsls	r3, r2
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fca:	492f      	ldr	r1, [pc, #188]	; (8001088 <HAL_GPIO_Init+0x2bc>)
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d006      	beq.n	8000ff2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	492c      	ldr	r1, [pc, #176]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	600b      	str	r3, [r1, #0]
 8000ff0:	e006      	b.n	8001000 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4928      	ldr	r1, [pc, #160]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_GPIO_Init+0x2d0>)
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	4922      	ldr	r1, [pc, #136]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_GPIO_Init+0x2d0>)
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	43db      	mvns	r3, r3
 8001022:	491e      	ldr	r1, [pc, #120]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8001024:	4013      	ands	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	4918      	ldr	r1, [pc, #96]	; (800109c <HAL_GPIO_Init+0x2d0>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	43db      	mvns	r3, r3
 800104a:	4914      	ldr	r1, [pc, #80]	; (800109c <HAL_GPIO_Init+0x2d0>)
 800104c:	4013      	ands	r3, r2
 800104e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d021      	beq.n	80010a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_GPIO_Init+0x2d0>)
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	490e      	ldr	r1, [pc, #56]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	60cb      	str	r3, [r1, #12]
 8001068:	e021      	b.n	80010ae <HAL_GPIO_Init+0x2e2>
 800106a:	bf00      	nop
 800106c:	10320000 	.word	0x10320000
 8001070:	10310000 	.word	0x10310000
 8001074:	10220000 	.word	0x10220000
 8001078:	10210000 	.word	0x10210000
 800107c:	10120000 	.word	0x10120000
 8001080:	10110000 	.word	0x10110000
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000
 800108c:	40010800 	.word	0x40010800
 8001090:	40010c00 	.word	0x40010c00
 8001094:	40011000 	.word	0x40011000
 8001098:	40011400 	.word	0x40011400
 800109c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_GPIO_Init+0x304>)
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	4909      	ldr	r1, [pc, #36]	; (80010d0 <HAL_GPIO_Init+0x304>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	3301      	adds	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	fa22 f303 	lsr.w	r3, r2, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f47f ae8e 	bne.w	8000de0 <HAL_GPIO_Init+0x14>
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	372c      	adds	r7, #44	; 0x2c
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40010400 	.word	0x40010400

080010d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e001      	b.n	80010f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	460b      	mov	r3, r1
 800110c:	807b      	strh	r3, [r7, #2]
 800110e:	4613      	mov	r3, r2
 8001110:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001112:	787b      	ldrb	r3, [r7, #1]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001118:	887a      	ldrh	r2, [r7, #2]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800111e:	e003      	b.n	8001128 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	041a      	lsls	r2, r3, #16
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	611a      	str	r2, [r3, #16]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	460b      	mov	r3, r1
 800113c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	4013      	ands	r3, r2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800114a:	887a      	ldrh	r2, [r7, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001150:	e002      	b.n	8001158 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	611a      	str	r2, [r3, #16]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
	...

08001164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f918 	bl	80003b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40010400 	.word	0x40010400

08001194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e272      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8087 	beq.w	80012c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011b4:	4b92      	ldr	r3, [pc, #584]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d00c      	beq.n	80011da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011c0:	4b8f      	ldr	r3, [pc, #572]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 030c 	and.w	r3, r3, #12
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	d112      	bne.n	80011f2 <HAL_RCC_OscConfig+0x5e>
 80011cc:	4b8c      	ldr	r3, [pc, #560]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d8:	d10b      	bne.n	80011f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011da:	4b89      	ldr	r3, [pc, #548]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d06c      	beq.n	80012c0 <HAL_RCC_OscConfig+0x12c>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d168      	bne.n	80012c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e24c      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fa:	d106      	bne.n	800120a <HAL_RCC_OscConfig+0x76>
 80011fc:	4b80      	ldr	r3, [pc, #512]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a7f      	ldr	r2, [pc, #508]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e02e      	b.n	8001268 <HAL_RCC_OscConfig+0xd4>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x98>
 8001212:	4b7b      	ldr	r3, [pc, #492]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a7a      	ldr	r2, [pc, #488]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b78      	ldr	r3, [pc, #480]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a77      	ldr	r2, [pc, #476]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e01d      	b.n	8001268 <HAL_RCC_OscConfig+0xd4>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0xbc>
 8001236:	4b72      	ldr	r3, [pc, #456]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a71      	ldr	r2, [pc, #452]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b6f      	ldr	r3, [pc, #444]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a6e      	ldr	r2, [pc, #440]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0xd4>
 8001250:	4b6b      	ldr	r3, [pc, #428]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a6a      	ldr	r2, [pc, #424]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b68      	ldr	r3, [pc, #416]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a67      	ldr	r2, [pc, #412]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001266:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d013      	beq.n	8001298 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fc62 	bl	8000b38 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fc5e 	bl	8000b38 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	; 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e200      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	4b5d      	ldr	r3, [pc, #372]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0xe4>
 8001296:	e014      	b.n	80012c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fc4e 	bl	8000b38 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fc4a 	bl	8000b38 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1ec      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	4b53      	ldr	r3, [pc, #332]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x10c>
 80012be:	e000      	b.n	80012c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d063      	beq.n	8001396 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ce:	4b4c      	ldr	r3, [pc, #304]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012da:	4b49      	ldr	r3, [pc, #292]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d11c      	bne.n	8001320 <HAL_RCC_OscConfig+0x18c>
 80012e6:	4b46      	ldr	r3, [pc, #280]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d116      	bne.n	8001320 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	4b43      	ldr	r3, [pc, #268]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <HAL_RCC_OscConfig+0x176>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d001      	beq.n	800130a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e1c0      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130a:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4939      	ldr	r1, [pc, #228]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	e03a      	b.n	8001396 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d020      	beq.n	800136a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001328:	4b36      	ldr	r3, [pc, #216]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132e:	f7ff fc03 	bl	8000b38 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001336:	f7ff fbff 	bl	8000b38 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e1a1      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001348:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4927      	ldr	r1, [pc, #156]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
 8001368:	e015      	b.n	8001396 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fbe2 	bl	8000b38 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001378:	f7ff fbde 	bl	8000b38 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e180      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d03a      	beq.n	8001418 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d019      	beq.n	80013de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_RCC_OscConfig+0x274>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b0:	f7ff fbc2 	bl	8000b38 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fbbe 	bl	8000b38 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e160      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013d6:	2001      	movs	r0, #1
 80013d8:	f000 faa6 	bl	8001928 <RCC_Delay>
 80013dc:	e01c      	b.n	8001418 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_RCC_OscConfig+0x274>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e4:	f7ff fba8 	bl	8000b38 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ea:	e00f      	b.n	800140c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ec:	f7ff fba4 	bl	8000b38 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d908      	bls.n	800140c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e146      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	42420000 	.word	0x42420000
 8001408:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	4b92      	ldr	r3, [pc, #584]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e9      	bne.n	80013ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80a6 	beq.w	8001572 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142a:	4b8b      	ldr	r3, [pc, #556]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10d      	bne.n	8001452 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b88      	ldr	r3, [pc, #544]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	4a87      	ldr	r2, [pc, #540]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	61d3      	str	r3, [r2, #28]
 8001442:	4b85      	ldr	r3, [pc, #532]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144e:	2301      	movs	r3, #1
 8001450:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001452:	4b82      	ldr	r3, [pc, #520]	; (800165c <HAL_RCC_OscConfig+0x4c8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d118      	bne.n	8001490 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145e:	4b7f      	ldr	r3, [pc, #508]	; (800165c <HAL_RCC_OscConfig+0x4c8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7e      	ldr	r2, [pc, #504]	; (800165c <HAL_RCC_OscConfig+0x4c8>)
 8001464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800146a:	f7ff fb65 	bl	8000b38 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001472:	f7ff fb61 	bl	8000b38 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b64      	cmp	r3, #100	; 0x64
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e103      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	4b75      	ldr	r3, [pc, #468]	; (800165c <HAL_RCC_OscConfig+0x4c8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d106      	bne.n	80014a6 <HAL_RCC_OscConfig+0x312>
 8001498:	4b6f      	ldr	r3, [pc, #444]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4a6e      	ldr	r2, [pc, #440]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6213      	str	r3, [r2, #32]
 80014a4:	e02d      	b.n	8001502 <HAL_RCC_OscConfig+0x36e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x334>
 80014ae:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4a69      	ldr	r2, [pc, #420]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	6213      	str	r3, [r2, #32]
 80014ba:	4b67      	ldr	r3, [pc, #412]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4a66      	ldr	r2, [pc, #408]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	f023 0304 	bic.w	r3, r3, #4
 80014c4:	6213      	str	r3, [r2, #32]
 80014c6:	e01c      	b.n	8001502 <HAL_RCC_OscConfig+0x36e>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d10c      	bne.n	80014ea <HAL_RCC_OscConfig+0x356>
 80014d0:	4b61      	ldr	r3, [pc, #388]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a60      	ldr	r2, [pc, #384]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	4b5e      	ldr	r3, [pc, #376]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4a5d      	ldr	r2, [pc, #372]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6213      	str	r3, [r2, #32]
 80014e8:	e00b      	b.n	8001502 <HAL_RCC_OscConfig+0x36e>
 80014ea:	4b5b      	ldr	r3, [pc, #364]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4a5a      	ldr	r2, [pc, #360]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6213      	str	r3, [r2, #32]
 80014f6:	4b58      	ldr	r3, [pc, #352]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4a57      	ldr	r2, [pc, #348]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	f023 0304 	bic.w	r3, r3, #4
 8001500:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d015      	beq.n	8001536 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150a:	f7ff fb15 	bl	8000b38 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	e00a      	b.n	8001528 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff fb11 	bl	8000b38 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001520:	4293      	cmp	r3, r2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e0b1      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	4b4b      	ldr	r3, [pc, #300]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0ee      	beq.n	8001512 <HAL_RCC_OscConfig+0x37e>
 8001534:	e014      	b.n	8001560 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001536:	f7ff faff 	bl	8000b38 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153c:	e00a      	b.n	8001554 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f7ff fafb 	bl	8000b38 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	f241 3288 	movw	r2, #5000	; 0x1388
 800154c:	4293      	cmp	r3, r2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e09b      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001554:	4b40      	ldr	r3, [pc, #256]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1ee      	bne.n	800153e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d105      	bne.n	8001572 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001566:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a3b      	ldr	r2, [pc, #236]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001570:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8087 	beq.w	800168a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800157c:	4b36      	ldr	r3, [pc, #216]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b08      	cmp	r3, #8
 8001586:	d061      	beq.n	800164c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d146      	bne.n	800161e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001590:	4b33      	ldr	r3, [pc, #204]	; (8001660 <HAL_RCC_OscConfig+0x4cc>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff facf 	bl	8000b38 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159e:	f7ff facb 	bl	8000b38 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e06d      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b0:	4b29      	ldr	r3, [pc, #164]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c4:	d108      	bne.n	80015d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	4921      	ldr	r1, [pc, #132]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a19      	ldr	r1, [r3, #32]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	430b      	orrs	r3, r1
 80015ea:	491b      	ldr	r1, [pc, #108]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_RCC_OscConfig+0x4cc>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff fa9f 	bl	8000b38 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff fa9b 	bl	8000b38 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e03d      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x46a>
 800161c:	e035      	b.n	800168a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_RCC_OscConfig+0x4cc>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fa88 	bl	8000b38 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162c:	f7ff fa84 	bl	8000b38 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e026      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x498>
 800164a:	e01e      	b.n	800168a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d107      	bne.n	8001664 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e019      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
 8001658:	40021000 	.word	0x40021000
 800165c:	40007000 	.word	0x40007000
 8001660:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_RCC_OscConfig+0x500>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	429a      	cmp	r2, r3
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001682:	429a      	cmp	r2, r3
 8001684:	d001      	beq.n	800168a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0d0      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016ac:	4b6a      	ldr	r3, [pc, #424]	; (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d910      	bls.n	80016dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b67      	ldr	r3, [pc, #412]	; (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 0207 	bic.w	r2, r3, #7
 80016c2:	4965      	ldr	r1, [pc, #404]	; (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b63      	ldr	r3, [pc, #396]	; (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0b8      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d020      	beq.n	800172a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f4:	4b59      	ldr	r3, [pc, #356]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4a58      	ldr	r2, [pc, #352]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800170c:	4b53      	ldr	r3, [pc, #332]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	4a52      	ldr	r2, [pc, #328]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001716:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001718:	4b50      	ldr	r3, [pc, #320]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	494d      	ldr	r1, [pc, #308]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d040      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d115      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e07f      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e073      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06b      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001776:	4b39      	ldr	r3, [pc, #228]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f023 0203 	bic.w	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4936      	ldr	r1, [pc, #216]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001788:	f7ff f9d6 	bl	8000b38 <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001790:	f7ff f9d2 	bl	8000b38 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e053      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 020c 	and.w	r2, r3, #12
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d1eb      	bne.n	8001790 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d210      	bcs.n	80017e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 0207 	bic.w	r2, r3, #7
 80017ce:	4922      	ldr	r1, [pc, #136]	; (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e032      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4916      	ldr	r1, [pc, #88]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	490e      	ldr	r1, [pc, #56]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001826:	f000 f821 	bl	800186c <HAL_RCC_GetSysClockFreq>
 800182a:	4602      	mov	r2, r0
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	490a      	ldr	r1, [pc, #40]	; (8001860 <HAL_RCC_ClockConfig+0x1c8>)
 8001838:	5ccb      	ldrb	r3, [r1, r3]
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	4a09      	ldr	r2, [pc, #36]	; (8001864 <HAL_RCC_ClockConfig+0x1cc>)
 8001840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_RCC_ClockConfig+0x1d0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff f934 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40022000 	.word	0x40022000
 800185c:	40021000 	.word	0x40021000
 8001860:	08002644 	.word	0x08002644
 8001864:	20000018 	.word	0x20000018
 8001868:	2000001c 	.word	0x2000001c

0800186c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800186c:	b490      	push	{r4, r7}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001872:	4b29      	ldr	r3, [pc, #164]	; (8001918 <HAL_RCC_GetSysClockFreq+0xac>)
 8001874:	1d3c      	adds	r4, r7, #4
 8001876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800187c:	f240 2301 	movw	r3, #513	; 0x201
 8001880:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d002      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x40>
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d003      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x46>
 80018aa:	e02b      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018ae:	623b      	str	r3, [r7, #32]
      break;
 80018b0:	e02b      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	0c9b      	lsrs	r3, r3, #18
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3328      	adds	r3, #40	; 0x28
 80018bc:	443b      	add	r3, r7
 80018be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d012      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_RCC_GetSysClockFreq+0xb0>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	0c5b      	lsrs	r3, r3, #17
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	3328      	adds	r3, #40	; 0x28
 80018da:	443b      	add	r3, r7
 80018dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018e6:	fb03 f202 	mul.w	r2, r3, r2
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
 80018f2:	e004      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	623b      	str	r3, [r7, #32]
      break;
 8001902:	e002      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001906:	623b      	str	r3, [r7, #32]
      break;
 8001908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190a:	6a3b      	ldr	r3, [r7, #32]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bc90      	pop	{r4, r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	08002634 	.word	0x08002634
 800191c:	40021000 	.word	0x40021000
 8001920:	007a1200 	.word	0x007a1200
 8001924:	003d0900 	.word	0x003d0900

08001928 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <RCC_Delay+0x34>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <RCC_Delay+0x38>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0a5b      	lsrs	r3, r3, #9
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001944:	bf00      	nop
  }
  while (Delay --);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1e5a      	subs	r2, r3, #1
 800194a:	60fa      	str	r2, [r7, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f9      	bne.n	8001944 <RCC_Delay+0x1c>
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	20000018 	.word	0x20000018
 8001960:	10624dd3 	.word	0x10624dd3

08001964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e01d      	b.n	80019b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7fe ff26 	bl	80007dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3304      	adds	r3, #4
 80019a0:	4619      	mov	r1, r3
 80019a2:	4610      	mov	r0, r2
 80019a4:	f000 fb38 	bl	8002018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0201 	orr.w	r2, r2, #1
 80019d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b06      	cmp	r3, #6
 80019e2:	d007      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0201 	orr.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6a1a      	ldr	r2, [r3, #32]
 8001a1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10f      	bne.n	8001a48 <HAL_TIM_Base_Stop_IT+0x48>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a1a      	ldr	r2, [r3, #32]
 8001a2e:	f240 4344 	movw	r3, #1092	; 0x444
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d107      	bne.n	8001a48 <HAL_TIM_Base_Stop_IT+0x48>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0201 	bic.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e01d      	b.n	8001aa2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7fe fef0 	bl	8000860 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f000 fac0 	bl	8002018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d122      	bne.n	8001b06 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d11b      	bne.n	8001b06 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f06f 0202 	mvn.w	r2, #2
 8001ad6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 fa78 	bl	8001fe2 <HAL_TIM_IC_CaptureCallback>
 8001af2:	e005      	b.n	8001b00 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fa6b 	bl	8001fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fa7a 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d122      	bne.n	8001b5a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d11b      	bne.n	8001b5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f06f 0204 	mvn.w	r2, #4
 8001b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fa4e 	bl	8001fe2 <HAL_TIM_IC_CaptureCallback>
 8001b46:	e005      	b.n	8001b54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fa41 	bl	8001fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 fa50 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d122      	bne.n	8001bae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d11b      	bne.n	8001bae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f06f 0208 	mvn.w	r2, #8
 8001b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2204      	movs	r2, #4
 8001b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fa24 	bl	8001fe2 <HAL_TIM_IC_CaptureCallback>
 8001b9a:	e005      	b.n	8001ba8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 fa17 	bl	8001fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fa26 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b10      	cmp	r3, #16
 8001bba:	d122      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b10      	cmp	r3, #16
 8001bc8:	d11b      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0210 	mvn.w	r2, #16
 8001bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f9fa 	bl	8001fe2 <HAL_TIM_IC_CaptureCallback>
 8001bee:	e005      	b.n	8001bfc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f9ed 	bl	8001fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f9fc 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d10e      	bne.n	8001c2e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d107      	bne.n	8001c2e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 0201 	mvn.w	r2, #1
 8001c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7fe fe6d 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c38:	2b80      	cmp	r3, #128	; 0x80
 8001c3a:	d10e      	bne.n	8001c5a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c46:	2b80      	cmp	r3, #128	; 0x80
 8001c48:	d107      	bne.n	8001c5a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fcac 	bl	80025b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c64:	2b40      	cmp	r3, #64	; 0x40
 8001c66:	d10e      	bne.n	8001c86 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c72:	2b40      	cmp	r3, #64	; 0x40
 8001c74:	d107      	bne.n	8001c86 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f9c0 	bl	8002006 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d10e      	bne.n	8001cb2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d107      	bne.n	8001cb2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f06f 0220 	mvn.w	r2, #32
 8001caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fc77 	bl	80025a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e0b4      	b.n	8001e40 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	f200 809f 	bhi.w	8001e2c <HAL_TIM_PWM_ConfigChannel+0x170>
 8001cee:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf4:	08001d29 	.word	0x08001d29
 8001cf8:	08001e2d 	.word	0x08001e2d
 8001cfc:	08001e2d 	.word	0x08001e2d
 8001d00:	08001e2d 	.word	0x08001e2d
 8001d04:	08001d69 	.word	0x08001d69
 8001d08:	08001e2d 	.word	0x08001e2d
 8001d0c:	08001e2d 	.word	0x08001e2d
 8001d10:	08001e2d 	.word	0x08001e2d
 8001d14:	08001dab 	.word	0x08001dab
 8001d18:	08001e2d 	.word	0x08001e2d
 8001d1c:	08001e2d 	.word	0x08001e2d
 8001d20:	08001e2d 	.word	0x08001e2d
 8001d24:	08001deb 	.word	0x08001deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f9d4 	bl	80020dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0208 	orr.w	r2, r2, #8
 8001d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0204 	bic.w	r2, r2, #4
 8001d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6999      	ldr	r1, [r3, #24]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	619a      	str	r2, [r3, #24]
      break;
 8001d66:	e062      	b.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fa1a 	bl	80021a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6999      	ldr	r1, [r3, #24]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	021a      	lsls	r2, r3, #8
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	619a      	str	r2, [r3, #24]
      break;
 8001da8:	e041      	b.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fa63 	bl	800227c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0208 	orr.w	r2, r2, #8
 8001dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69da      	ldr	r2, [r3, #28]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0204 	bic.w	r2, r2, #4
 8001dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	69d9      	ldr	r1, [r3, #28]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	61da      	str	r2, [r3, #28]
      break;
 8001de8:	e021      	b.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 faad 	bl	8002350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69da      	ldr	r2, [r3, #28]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69d9      	ldr	r1, [r3, #28]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	021a      	lsls	r2, r3, #8
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	61da      	str	r2, [r3, #28]
      break;
 8001e2a:	e000      	b.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001e2c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_TIM_ConfigClockSource+0x18>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e0b3      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x180>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e98:	d03e      	beq.n	8001f18 <HAL_TIM_ConfigClockSource+0xd0>
 8001e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e9e:	f200 8087 	bhi.w	8001fb0 <HAL_TIM_ConfigClockSource+0x168>
 8001ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea6:	f000 8085 	beq.w	8001fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8001eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eae:	d87f      	bhi.n	8001fb0 <HAL_TIM_ConfigClockSource+0x168>
 8001eb0:	2b70      	cmp	r3, #112	; 0x70
 8001eb2:	d01a      	beq.n	8001eea <HAL_TIM_ConfigClockSource+0xa2>
 8001eb4:	2b70      	cmp	r3, #112	; 0x70
 8001eb6:	d87b      	bhi.n	8001fb0 <HAL_TIM_ConfigClockSource+0x168>
 8001eb8:	2b60      	cmp	r3, #96	; 0x60
 8001eba:	d050      	beq.n	8001f5e <HAL_TIM_ConfigClockSource+0x116>
 8001ebc:	2b60      	cmp	r3, #96	; 0x60
 8001ebe:	d877      	bhi.n	8001fb0 <HAL_TIM_ConfigClockSource+0x168>
 8001ec0:	2b50      	cmp	r3, #80	; 0x50
 8001ec2:	d03c      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0xf6>
 8001ec4:	2b50      	cmp	r3, #80	; 0x50
 8001ec6:	d873      	bhi.n	8001fb0 <HAL_TIM_ConfigClockSource+0x168>
 8001ec8:	2b40      	cmp	r3, #64	; 0x40
 8001eca:	d058      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0x136>
 8001ecc:	2b40      	cmp	r3, #64	; 0x40
 8001ece:	d86f      	bhi.n	8001fb0 <HAL_TIM_ConfigClockSource+0x168>
 8001ed0:	2b30      	cmp	r3, #48	; 0x30
 8001ed2:	d064      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0x156>
 8001ed4:	2b30      	cmp	r3, #48	; 0x30
 8001ed6:	d86b      	bhi.n	8001fb0 <HAL_TIM_ConfigClockSource+0x168>
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d060      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0x156>
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	d867      	bhi.n	8001fb0 <HAL_TIM_ConfigClockSource+0x168>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d05c      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0x156>
 8001ee4:	2b10      	cmp	r3, #16
 8001ee6:	d05a      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001ee8:	e062      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6899      	ldr	r1, [r3, #8]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f000 faee 	bl	80024da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	609a      	str	r2, [r3, #8]
      break;
 8001f16:	e04e      	b.n	8001fb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6899      	ldr	r1, [r3, #8]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f000 fad7 	bl	80024da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f3a:	609a      	str	r2, [r3, #8]
      break;
 8001f3c:	e03b      	b.n	8001fb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6859      	ldr	r1, [r3, #4]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	f000 fa4e 	bl	80023ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2150      	movs	r1, #80	; 0x50
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 faa5 	bl	80024a6 <TIM_ITRx_SetConfig>
      break;
 8001f5c:	e02b      	b.n	8001fb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f000 fa6c 	bl	8002448 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2160      	movs	r1, #96	; 0x60
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fa95 	bl	80024a6 <TIM_ITRx_SetConfig>
      break;
 8001f7c:	e01b      	b.n	8001fb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6859      	ldr	r1, [r3, #4]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f000 fa2e 	bl	80023ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2140      	movs	r1, #64	; 0x40
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fa85 	bl	80024a6 <TIM_ITRx_SetConfig>
      break;
 8001f9c:	e00b      	b.n	8001fb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4610      	mov	r0, r2
 8001faa:	f000 fa7c 	bl	80024a6 <TIM_ITRx_SetConfig>
      break;
 8001fae:	e002      	b.n	8001fb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001fb0:	bf00      	nop
 8001fb2:	e000      	b.n	8001fb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001fb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a29      	ldr	r2, [pc, #164]	; (80020d0 <TIM_Base_SetConfig+0xb8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00b      	beq.n	8002048 <TIM_Base_SetConfig+0x30>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002036:	d007      	beq.n	8002048 <TIM_Base_SetConfig+0x30>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <TIM_Base_SetConfig+0xbc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d003      	beq.n	8002048 <TIM_Base_SetConfig+0x30>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <TIM_Base_SetConfig+0xc0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d108      	bne.n	800205a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <TIM_Base_SetConfig+0xb8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00b      	beq.n	800207a <TIM_Base_SetConfig+0x62>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002068:	d007      	beq.n	800207a <TIM_Base_SetConfig+0x62>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <TIM_Base_SetConfig+0xbc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d003      	beq.n	800207a <TIM_Base_SetConfig+0x62>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <TIM_Base_SetConfig+0xc0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d108      	bne.n	800208c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <TIM_Base_SetConfig+0xb8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d103      	bne.n	80020c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	615a      	str	r2, [r3, #20]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	40000400 	.word	0x40000400
 80020d8:	40000800 	.word	0x40000800

080020dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	f023 0201 	bic.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f023 0302 	bic.w	r3, r3, #2
 8002124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <TIM_OC1_SetConfig+0xc8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d10c      	bne.n	8002152 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f023 0308 	bic.w	r3, r3, #8
 800213e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	4313      	orrs	r3, r2
 8002148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <TIM_OC1_SetConfig+0xc8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d111      	bne.n	800217e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	621a      	str	r2, [r3, #32]
}
 8002198:	bf00      	nop
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40012c00 	.word	0x40012c00

080021a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	f023 0210 	bic.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f023 0320 	bic.w	r3, r3, #32
 80021f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <TIM_OC2_SetConfig+0xd0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d10d      	bne.n	8002224 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800220e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002222:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a14      	ldr	r2, [pc, #80]	; (8002278 <TIM_OC2_SetConfig+0xd0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d113      	bne.n	8002254 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800223a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	621a      	str	r2, [r3, #32]
}
 800226e:	bf00      	nop
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40012c00 	.word	0x40012c00

0800227c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0303 	bic.w	r3, r3, #3
 80022b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <TIM_OC3_SetConfig+0xd0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10d      	bne.n	80022f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <TIM_OC3_SetConfig+0xd0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d113      	bne.n	8002326 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800230c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	621a      	str	r2, [r3, #32]
}
 8002340:	bf00      	nop
 8002342:	371c      	adds	r7, #28
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40012c00 	.word	0x40012c00

08002350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800237e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800239a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	031b      	lsls	r3, r3, #12
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <TIM_OC4_SetConfig+0x98>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d109      	bne.n	80023c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	019b      	lsls	r3, r3, #6
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	621a      	str	r2, [r3, #32]
}
 80023de:	bf00      	nop
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	40012c00 	.word	0x40012c00

080023ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	f023 0201 	bic.w	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f023 030a 	bic.w	r3, r3, #10
 8002428:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	621a      	str	r2, [r3, #32]
}
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f023 0210 	bic.w	r2, r3, #16
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002472:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	031b      	lsls	r3, r3, #12
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002484:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	621a      	str	r2, [r3, #32]
}
 800249c:	bf00      	nop
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f043 0307 	orr.w	r3, r3, #7
 80024c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	609a      	str	r2, [r3, #8]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024da:	b480      	push	{r7}
 80024dc:	b087      	sub	sp, #28
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	021a      	lsls	r2, r3, #8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	4313      	orrs	r3, r2
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	609a      	str	r2, [r3, #8]
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800252c:	2302      	movs	r3, #2
 800252e:	e032      	b.n	8002596 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002568:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	4313      	orrs	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <memset>:
 80025c4:	4603      	mov	r3, r0
 80025c6:	4402      	add	r2, r0
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d100      	bne.n	80025ce <memset+0xa>
 80025cc:	4770      	bx	lr
 80025ce:	f803 1b01 	strb.w	r1, [r3], #1
 80025d2:	e7f9      	b.n	80025c8 <memset+0x4>

080025d4 <__libc_init_array>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	2600      	movs	r6, #0
 80025d8:	4d0c      	ldr	r5, [pc, #48]	; (800260c <__libc_init_array+0x38>)
 80025da:	4c0d      	ldr	r4, [pc, #52]	; (8002610 <__libc_init_array+0x3c>)
 80025dc:	1b64      	subs	r4, r4, r5
 80025de:	10a4      	asrs	r4, r4, #2
 80025e0:	42a6      	cmp	r6, r4
 80025e2:	d109      	bne.n	80025f8 <__libc_init_array+0x24>
 80025e4:	f000 f81a 	bl	800261c <_init>
 80025e8:	2600      	movs	r6, #0
 80025ea:	4d0a      	ldr	r5, [pc, #40]	; (8002614 <__libc_init_array+0x40>)
 80025ec:	4c0a      	ldr	r4, [pc, #40]	; (8002618 <__libc_init_array+0x44>)
 80025ee:	1b64      	subs	r4, r4, r5
 80025f0:	10a4      	asrs	r4, r4, #2
 80025f2:	42a6      	cmp	r6, r4
 80025f4:	d105      	bne.n	8002602 <__libc_init_array+0x2e>
 80025f6:	bd70      	pop	{r4, r5, r6, pc}
 80025f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fc:	4798      	blx	r3
 80025fe:	3601      	adds	r6, #1
 8002600:	e7ee      	b.n	80025e0 <__libc_init_array+0xc>
 8002602:	f855 3b04 	ldr.w	r3, [r5], #4
 8002606:	4798      	blx	r3
 8002608:	3601      	adds	r6, #1
 800260a:	e7f2      	b.n	80025f2 <__libc_init_array+0x1e>
 800260c:	08002654 	.word	0x08002654
 8002610:	08002654 	.word	0x08002654
 8002614:	08002654 	.word	0x08002654
 8002618:	08002658 	.word	0x08002658

0800261c <_init>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr

08002628 <_fini>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	bf00      	nop
 800262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262e:	bc08      	pop	{r3}
 8002630:	469e      	mov	lr, r3
 8002632:	4770      	bx	lr
